<?php
/* ----------------------------------------------------------------------------
 * $Id: parser.plu,v 1.1 2004/08/13 00:52:52 cvs Exp $
 *   SSSL パーサ
 * ----------------------------------------------------------------------------
 * Mastering programed by Dot-Station Mastor
 *
 * Copyright 2004 Dot-Station.
 * ----------------------------------------------------------------------------
 */

/**
 * XML/SSSL記述をオブジェクトに展開するパーサ
 *
 * @package  dot_sssl_Parser
 * @since    PHP 5.0.0rc1
 * @author   Dot-Station Mastor
 * @version  $Revision: 1.1 $
 */
class dot_sssl_Parser extends SafeObject{
  // {{{ parse
  /**
   * 指定テキストをパース（静的メソッド）。
   *
   * @param  string $xmlText  XMLテキスト(UTF-8エンコード限定)
   * @return interface dot_SSSL
   */
  public static function parse($xmlText) {
    $parser =new dot_sssl_Parser($xmlText);
    return $parser->_getSSSL();
  }



  // }}}
  // {{{ parseFile
  /**
   * 指定ファイルをパース（静的メソッド）。
   *
   * @param  string $file XMLファイル名
   * @return interface dot_SSSL
   */
  public static function parseFile($xmlFile) {
    if( !($xmlText =file_get_contents($xmlFile))) return FALSE;
    return dot_sssl_Parser::parse($xmlText);
  }



  // }}}
  // {{{ properties
  /**
   * XMLパーサ
   * @var int
   */
  private $parser;


  /**
   * トップレベルSSSLオブジェクト
   * @var interface dot_SSSL
   */
  private $ssslTop;


  /**
   * 現在注目しているSSSLオブジェクト
   * @var interface dot_SSSL
   */
  private $sssl;


  /**
   * タグの階層を保存
   * @var interface dot_SSSL[]
   */
  private $ssslStack;



  // }}}
  // {{{ __construct
  /**
   * コンストラクタ。
   *
   * @param  string $xmlText  XMLテキスト(UTF-8エンコード限定)
   */
  private function __construct($xmlText) {
    $this->parser = xml_parser_create('UTF-8');
    xml_set_object($this->parser ,$this);
    xml_set_element_handler($this->parser ,"_tag_open","_tag_close");
    xml_set_character_data_handler($this->parser ,"_cdata");
    $this->sssl       =NULL;
    $this->ssslTop    =NULL;
    $this->ssslStack  =array();
    $this->_parse($xmlText);
  }



  // }}}
  // {{{ __destruct
  /**
   * デストラクタ。
   */
  function __destruct(){
    xml_parser_free($this->parser);
  }



  // }}}
  // {{{ _parse
  /**
   * パース。
   *
   * @param  string $xmlText  XMLテキスト(UTF-8エンコード限定)
   * @return bool 解析に成功した場合はTRUE
   */
  private function _parse($xmlText) {
    try{
      if(! xml_parse($this->parser,$xmlText, TRUE)){
        $errString =xml_error_string($this->parser);
        $mes ="XMLパーサエラー[$errString]";
        throw new dot_sssl_ParserException($mes);
      }
    }
    catch(dot_sssl_ParserException $ex){
      $line   =xml_get_current_line_number($this->parser);
      $column =xml_get_current_column_number($this->parser);
      dot_Util::echoErr("XML解析中に例外(行:$line/桁:$column)\n");
      $ex->printStackTrace();
      $this->ssslTop =FALSE;
      return FALSE;
    }
    return TRUE;
  }



  // }}}
  // {{{ _getSSSL
  /**
   * 解析結果のSSSLオブジェクトを返す。
   *
   * @param void
   * @return interface dot_SSSL
   */
  public function _getSSSL() {
    return $this->ssslTop;
  }



  // }}}
  // {{{ _tag_open
  /**
   * 新規タグを発見。
   *   1.タグに該当するSSSLオブジェクトを作成。
   *   2.現在処理中のタグをスタックに投入する。
   *   3.新規タグを現在処理中のタグに設定する。
   *
   * @param  int      $parser     XMLパーサ
   * @param  string   $tag        タグ名
   * @param  array    $attributes 属性の配列
   */
  public function _tag_open($parser,$tag,$attributes){
    $new_sssl =dot_sssl_Factory::createSSSL($tag ,$attributes);
    if($this->ssslTop==NULL)  $this->ssslTop =$new_sssl;
    $this->ssslStack[] =$this->sssl;
    $this->sssl =$new_sssl;
  }



  // }}}
  // {{{ _tag_close
  /**
   * タグのクローズを確認。
   *   1.スタックからタグを取り出す。
   *   2.取り出したタグが有効なオブジェクトなら、現在処理中のタグを登録する。
   *   3.取り出したタグを現在処理中のタグにする。
   *
   * @param  int      $parser     XMLパーサ
   * @param  string   $tag        タグ名
   */
  public function _tag_close($parser,$tag) {
    if($this->sssl->getTagName() != $tag) throw new dot_sssl_ParserException("不正なタグのクローズ");
    $sssl =array_pop($this->ssslStack);
    if($sssl instanceOf dot_SSSL) $sssl->add_sssl($this->sssl);
    $this->sssl =$sssl;
  }



  // }}}
  // {{{ _cdata
  /**
   * キャラクターデータを確認。
   * 現在のオブジェクトにキャラクターデータを追加する。
   *
   * @param  int      $parser     XMLパーサ
   * @param  string   $cdata      キャラクターデータ
   */
  function _cdata($parser,$cdata) {
    if($this->sssl instanceOf dot_SSSL){
      $this->sssl->add_cdata($cdata);
    }
  }



  // }}}
}
?>