<?php
/* ----------------------------------------------------------------------------
 * $Id: parser.plu,v 1.2 2004/08/27 08:31:01 cvs Exp $
 *   SHIORIパーサ
 * ----------------------------------------------------------------------------
 * Mastering programed by Dot-Station Mastor
 *
 * Copyright 2004 Dot-Station.
 * ----------------------------------------------------------------------------
 */

/**
 * SHIORIパーサ。SHIORI構文をリクエストに分解する
 *
 * @package  dot_Parser
 * @since    PHP 5.0.1
 * @author   Dot-Station Mastor
 * @version  $Revision: 1.2 $
 */
class dot_Parser extends SafeObject{

  // {{{ createRequest()
  /**
   * SHIORIコマンドを解析し、リクエストを作成する。
   *
   * @param string $lines SHIORIリクエスト
   */
  static public function createRequest($lines){
    // コマンドを分割
    $cmd =dot_shiori_Parser::parseSHIORI($lines);
    $params    =$cmd['params'];

    // バージョン判定
    if     (preg_match('/^SHIORI_2/' ,$cmd['version'])) $Ver ="shiori2x";
    else if(preg_match('/^SHIORI_3/' ,$cmd['version'])) $Ver ="shiori3x";
    else if(preg_match('/^TUNAKI_1/' ,$cmd['version'])) $Ver ="tunaki1x";
    else                                                $Ver ="shiori2x";

    // イベント名判定
    $event =$cmd['eventName'];
    if($Ver=="shiori2x"){
      $event ="NotFound";
    }

    // パーサクラス検索
    $className ="dot_event_{$Ver}_{$event}";
    if(! class_exists($className)){
      $event ="NotFound";
      $className ="dot_event_{$Ver}_{$event}";
    }
    // クラス別パーサを呼び出す
    return $className::createRequest($cmd);
  }



  // }}}
  // {{{ parseSHIORI()
  /**
   * SHIORIトークンを解析する
   * @see
   * @param string[] $lines 解析するテキスト
   * @return array
   *    $rc['eventName' ]
   *    $rc['version'   ]
   *    $rc['params'    ]
   */
  static public function parseSHIORI($lines){
    // 取込
    $params =array();
    foreach($lines as $line){
      $line =trim($line);
      if($line=="") continue;
      if(! isset($header)){
        $header =$line;
        continue;
      }
      list($key, $value) =explode (":" ,$line ,2);
      $params[trim($key)][] =trim($value);
    }

    // キャラクターエンコードを内部表現に変換
    $charSet =$params['Charset'][0];
    $enq =$charSet;
    switch($charSet){
      case 'Shift_JIS': $enq ="SJIS-win";   break;
      case 'EUC-JP':    $enq ="eucJP-win";  break;
      case 'EUC_JP':    $enq ="eucJP-win";  break;
    }
    if(mb_internal_encoding()!=$enq){
      $header =mb_convert_encoding($header ,mb_internal_encoding() ,$enq);
      foreach($params as $k1=>$p){
        if(is_array($p)) foreach($p as $k2=>$v){
          $params[$k1][$k2] =mb_convert_encoding($v ,mb_internal_encoding() ,$enq);
        }
      }
    }

    // Header解析(例:[GET Version SHIORI/2.0])
    if(preg_match('/^(\w+)(\s+(\w+))?(\s+)(\w+)\/(\d+)\.(\d+)$/' ,$header ,$m)){
      $com    =array();
      $com[]  =$m[1];
      if($m[3]!="") $com[] =$m[3];
      $type   =$m[5];
      $ver1   =$m[6];
      $ver2   =$m[7];
      $eventName =implode('_' ,$com);
      $version ="{$type}_{$ver1}_{$ver2}";
      $rc['eventName' ] =$eventName;
      $rc['version'   ] =$version;
      $rc['params'    ] =$params;
      return $rc;
    }
    return FALSE;
  }

  // }}}
}
?>