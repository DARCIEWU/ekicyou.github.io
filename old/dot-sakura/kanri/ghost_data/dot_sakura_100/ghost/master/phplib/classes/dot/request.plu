<?php
/* ----------------------------------------------------------------------------
 * $Id: request.plu,v 1.9 2004/08/18 01:56:23 cvs Exp $
 *   EVENTモジュールインターフェース
 * ----------------------------------------------------------------------------
 * Mastering programed by Dot-Station Mastor
 *
 * Copyright 2004 Dot-Station.
 * ----------------------------------------------------------------------------
 */

/**
 * リクエスト処理クラス。
 * リクエスト情報より、リクエストを作成し、イベントを呼び出します。
 *
 * @package  dot.Request
 * @since    PHP 5.0.0rc1
 * @author   Dot-Station Mastor
 * @version  $Revision: 1.9 $
 */
class dot_Request extends SafeObject{

  // {{{ properties
  /**
   * イベント名
   * @var string
   */
  public $eventName;

  /**
   * パラメータ情報
   * @var string[][]
   */
  public $params;

  /**
   * バージョン
   * @var string
   */
  public $version;

  /**
   * バージョンのタイプ
   * @var string
   */
  public $verType;

  /**
   * バージョンナンバー（メジャー）
   * @var int
   */
  public $verNum;

  /**
   * バージョンナンバー（マイナー）
   * @var int
   */
  public $verNum2;


  // }}}
  // {{{ createFromSHIORI
  /**
   * SHIORIトークンを元にリクエストオブジェクトを作成する。
   * 作成できなかった時はFALSEを返す。
   * @see
   * @param  $lines SHIORIリクエスト
   * @return class dot_Request req
   */
  static public function createFromSHIORI($lines){
    $rc =dot_Request::parseSHIORI($lines);
    if(is_array($rc)){
      return new dot_Request($rc['eventName'], $rc['params'], $rc['version']);
    }
    else{
      return FALSE;
    }
  }



  // }}}
  // {{{ parseSHIORI()
  /**
   * SHIORIトークンを解析する
   * @see
   * @param string[] $lines 解析するテキスト
   * @return array
   *    $rc['eventName' ]
   *    $rc['version'   ]
   *    $rc['params'    ]
   */
  static public function parseSHIORI($lines){
    // 取込
    $params =array();
    foreach($lines as $line){
      $line =trim($line);
      if($line=="") continue;
      if(! isset($header)){
        $header =$line;
        continue;
      }
      list($key, $value) =explode (":" ,$line ,2);
      $params[trim($key)][] =trim($value);
    }

    // キャラクターエンコードを内部表現に変換
    $charSet =$params['Charset'][0];
    $enq =$charSet;
    switch($charSet){
      case 'Shift_JIS': $enq ="SJIS-win";   break;
      case 'EUC-JP':    $enq ="eucJP-win";  break;
      case 'EUC_JP':    $enq ="eucJP-win";  break;
    }
    if(mb_internal_encoding()!=$enq){
      $header =mb_convert_encoding($header ,mb_internal_encoding() ,$enq);
      foreach($params as $k1=>$p){
        if(is_array($p)) foreach($p as $k2=>$v){
          $params[$k1][$k2] =mb_convert_encoding($v ,mb_internal_encoding() ,$enq);
        }
      }
    }

    // Header解析(例:[GET Version SHIORI/2.0])
    if(preg_match('/^(\w+)(\s+(\w+))?(\s+)(\w+)\/(\d+)\.(\d+)$/' ,$header ,$m)){
      $com    =array();
      $com[]  =$m[1];
      if($m[3]!="") $com[] =$m[3];
      $type   =$m[5];
      $ver1   =$m[6];
      $ver2   =$m[7];
      $eventName =implode('_' ,$com);
      $version ="{$type}_{$ver1}_{$ver2}";
      $rc['eventName' ] =$eventName;
      $rc['version'   ] =$version;
      $rc['params'    ] =$params;
      return $rc;
    }
    return FALSE;
  }


  // }}}
  // {{{ __construct
  /**
   * コンストラクタ。
   *
   * @param string     $eventName イベント名
   * @param string[][] $Params    パラメータリスト
   * @param string     $version   イベントバージョン
   * @return void
   */
  public function __construct($eventName, $params=NULL, $version=NULL){
    if(! is_array($param))  $param =array();
    if($version==NULL)      $version ='LOCAL_0_0';
    $a =explode("_" ,$version);
    $this->eventName =$eventName;
    $this->params    =$params;
    $this->version   =$version;
    $this->verType   =$a[0];
    $this->verNum    =$a[1]+0;
    $this->verNum2   =$a[2]+0;
  }


  // }}}
  // {{{ __destruct
  /**
   * デストラクタ。
   */
  function __destruct(){
  }


  // }}}
}
?>
