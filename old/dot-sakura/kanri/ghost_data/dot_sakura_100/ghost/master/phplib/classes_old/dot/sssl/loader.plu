<?php
/* ----------------------------------------------------------------------------
 * $Id: loader.plu,v 1.1 2004/08/13 00:52:52 cvs Exp $
 *   SSSL ローダ
 * ----------------------------------------------------------------------------
 * Mastering programed by Dot-Station Mastor
 *
 * Copyright 2004 Dot-Station.
 * ----------------------------------------------------------------------------
 */

/**
 * URLリクエストよりSSSLをロードする。
 *
 * @package  dot_sssl_Requester
 * @since    PHP 5.0.0rc1
 * @author   Dot-Station Mastor
 * @version  $Revision: 1.1 $
 */
class dot_sssl_Loader extends SafeObject{
  // {{{ static properties
  /**
   * 共有インスタンス(Singletonパターン)
   * @var dot_sssl_Loader
   */
  static private $ownInstance;



  // }}}
  // {{{ getInstance
  /**
   * インスタンスを取得する。(Singletonパターン)
   *
   * @param  void
   * @return dot_sssl_Loader $instance;
   */
  static public function getInstance(){
    if(! (dot_sssl_Loader::$ownInstance instanceOf dot_sssl_Loader)){
      dot_sssl_Loader::$ownInstance =new dot_sssl_Loader();
    }
    return dot_sssl_Loader::$ownInstance;
  }



  // }}}
  // {{{ getObject
  /**
   * リクエストに対応するオブジェクトを取得する
   */
  static public function getObject(dot_sssl_Request $req){
    $loader =dot_sssl_Loader::getInstance();
    return $loader->getObject($req);
  }



  // }}}
  // {{{ properties
  /**
   * キャッシュ
   * @var dot_sssl_Cache
   */
  private $cache;



  // }}}
  // {{{ __construct
  /**
   * コンストラクタ。
   *
   * @param  void
   */
  private function __construct() {
    $this->cache =new dot_sssl_Cache(10 ,new dot_sssl_Cache(100));
  }



  // }}}
  // {{{ __destruct
  /**
   * デストラクタ。
   */
  function __destruct(){
  }



  // }}}
  // {{{ getObject
  /**
   * リクエストに対応するオブジェクトを取得する
   *
   * @param  dot_sssl_Request $req リクエスト
   * @return dot_sssl              取得したSSSLオブジェクト、取得できなかった場合はFALSE
   */
  public function getObject(dot_sssl_Request $req){
    // リクエスト要素の分解
    $eventId =$req->eventId;
    $url =$req->getBaseUrl();

    // キャッシュに存在すればそれを取得
    $sssl =$this->cache->getObject($eventId ,$url);
    if($sssl instanceOf dot_SSSL) return $sssl;

    // 存在しない場合はload
    $sssl =$this->loadObject($url);

    // キャッシュ処理
    if($sssl instanceOf dot_sssl){
      $this->cache->addObject($eventId ,$url ,$sssl);
    }

    // 終了
    return $sssl;
  }



  // }}}
  // {{{ loadObject
  /**
   * リクエストに対応するオブジェクトを取得する
   *
   * @param  dot_sssl_Request $req リクエスト
   * @return dot_sssl              取得したSSSLオブジェクト、取得できなかった場合はFALSE
   */
  private function loadObject(dot_sssl_Request $req){
    $urlParse =parse_url($req->getBaseUrl());
    unset($schemes);
    if($urlParse['scheme']=='local')  $schemes =$GLOBALS['DOT_SCRIPT']['SSSL_LOADER_CALL_LOCAL_LIST'];
    else                              $schemes[] =$urlParse['scheme'];

    foreach($schemes as $scheme){
      // URL作成
      $url ="$scheme://";
      if(isset($urlParse['user' ])) $url .=$urlParse['user'] .":";
      if(isset($urlParse['pass' ])) $url .=$urlParse['pass'] ."@";
      if(isset($urlParse['host' ])) $url .=$urlParse['host'];
      if(isset($urlParse['port' ])) $url .=":" .$urlParse['port'];
      if(isset($urlParse['path' ])) $url .=$urlParse['path'];
      if(isset($urlParse['query'])) $url .="?" .$urlParse['query'];

      // パーサにURLを渡して解析させる
      $sssl =dot_sssl_Parser::parseFile($url);
      if($sssl instanceOf dot_sssl) break;
    }
    return $sssl;
  }



  // }}}
}
?>