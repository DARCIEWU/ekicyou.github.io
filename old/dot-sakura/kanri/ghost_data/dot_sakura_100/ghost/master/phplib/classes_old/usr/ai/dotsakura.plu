<?php
/* ----------------------------------------------------------------------------
 * $Id: dotsakura.plu,v 1.1 2004/08/13 00:52:53 cvs Exp $
 *   ＡＩモジュール Stage1（遅延起動）
 * ----------------------------------------------------------------------------
 * Mastering programed by Dot-Station Mastor
 *
 * Copyright 2004 Dot-Station.
 * ----------------------------------------------------------------------------
 */

/**
 * 「．さくら」ＡＩモジュール
 *
 * @package  usr_ai_DotSakura
 * @since    PHP 5.0.0rc1
 * @author   Dot-Station Mastor
 * @version  $Revision: 1.1 $
 */
class usr_ai_DotSakura extends SafeObject implements dot_AI{

  // {{{ properties
  /**
   * AIインターフェース：ステージ１(DBを参照しない/即時初期化)
   * @var interface dot_AI
   */
  public $stage1 =NULL;

  /**
   * AIインターフェース：ステージ２(DB参照有り/遅延初期化)
   * @var interface dot_AI
   */
  public $stage2 =NULL;



  // }}}
  // {{{ __construct
  /**
   * コンストラクタ。
   *
   * @param void
   */
  public function __construct(){
    $this->stage1 =new usr_ai_Stage1();
  }


  // }}}
  // {{{ delaydInit
  /**
   * 遅延初期化処理
   *
   * @param void
   */
  public function delaydInit(){
    if($this->stage2==NULL) $this->stage2 =new usr_ai_Stage2();
  }


  // }}}
  // {{{ __destruct
  /**
   * デストラクタ。
   */
  function __destruct(){
  }



  // }}}
  // {{{ get
  /**
   * GET通知に対する応答
   *
   * @param string[][]  $Params パラメータリスト
   * @return string[][] $rc     パラメータリスト
   */
  public function get($eventName ,$Params=NULL){
    // Stage1
    $rc =$this->stage1->get($eventName ,$Params);
    if(is_array($rc)) return $rc;

    // Stage2
    $this->delaydInit();
    return $this->stage1->get($eventName ,$Params);
  }



  // }}}
  // {{{ notify
  /**
   * NOTIFY通知に対する応答
   *
   * @param string[][]  $Params パラメータリスト
   * @return string[][] $rc     パラメータリスト
   */
  public function notify($eventName ,$Params=NULL){
    // Stage1
    $rc =$this->stage1->notify($eventName ,$Params);
    if(is_array($rc)) return $rc;

    // Stage2
    $this->delaydInit();
    return $this->stage1->notify($eventName ,$Params);
  }



  // }}}
  // {{{ begin
  /**
   * トランザクション開始
   *
   * @param void
   * @return void
   */
  public function begin(){
    $this->stage1->begin();
    if($this->stage2!=NULL) $this->stage2->begin();
  }



  // }}}
  // {{{ commit
  /**
   * コミット
   *
   * @param void
   * @return void
   */
  public function commit(){
    if($this->stage2!=NULL) $this->stage2->commit();
    $this->stage1->commit();
  }



  // }}}
  // {{{ rollback
  /**
   * ロールバック
   *
   * @param void
   * @return void
   */
  public function rollback(){
    if($this->stage2!=NULL) $this->stage2->rollback();
    $this->stage1->rollback();
  }



  // }}}
}
?>
