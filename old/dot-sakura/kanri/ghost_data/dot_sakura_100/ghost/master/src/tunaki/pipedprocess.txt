ロジックのメモ

-------------------------------------------------------------------------------
typedef struct _PIPED_PROCESS{
        // 各関数の実行結果
        BOOL resultCreateStdPipe;
        BOOL resultSwapSTD;
        BOOL resultCreateChild;
        BOOL resultRestoreSTD;

        // オリジナルの標準入出力
    HANDLE hSTDIN_ORG;
    HANDLE hSTDOUT_ORG;
    HANDLE hSTDERR_ORG;

        // 作成されたパイプ
    HANDLE hSTDIN_R;
    HANDLE hSTDIN_W;
    HANDLE hSTDOUT_R;
    HANDLE hSTDOUT_W;
    HANDLE hSTDERR_R
    HANDLE hSTDERR_W;

        // 作成されたプロセス
    HANDLE hProcess;

        // プロセス起動パラメータ
    LPTCSTR appName;
    LPTCSTR cmdLine;
    LPTCSTR CurrentDir;

        HANDLE cp;                          // カレントプロセスのハンドル
    SECURITY_ATTRIBUTES sa; // セキュリティ記述子

} PIPED_PROCESS, *PPIPED_PROCESS;


-------------------------------------------------------------------------------
// メインルーチン
createStdPipe(&pp); // 入出力パイプの作成
swapSTD(&pp);               // 標準入出力の振替
createChild(&pp);       // 子プロセスの作成
restoreSTD(&pp);        // 標準入出力を元に戻す


-------------------------------------------------------------------------------
サンプルプログラム
# include <windows.h>
# include <string.h>

int main(int argc, char *argv[])
{
  int result;

  SECURITY_ATTRIBUTES SecurityAttributes;
  HANDLE hOldStdout;
  HANDLE hOldStdin;
  HANDLE hOldStdoutDup;
  HANDLE hOldStdinDup;
  HANDLE hPipeWrite;
  HANDLE hPipeWriteDup;
  HANDLE hPipeRead;
  HANDLE hPipeReadDup;
  STARTUPINFO startInfo;
  PROCESS_INFORMATION processInfo;

  /* パイプの作成 --------------------------------------------------- */
  SecurityAttributes.nLength = sizeof(SecurityAttributes);
  SecurityAttributes.lpSecurityDescriptor = NULL;
  SecurityAttributes.bInheritHandle = FALSE;
  CreatePipe(&hPipeRead, &hPipeWrite, &SecurityAttributes, 0);

  /* 現在のSTDOUTを[hOldStdout]に保管 ------------------------------- */
  DuplicateHandle(GetCurrentProcess(),
                  GetStdHandle(STD_OUTPUT_HANDLE),
                  GetCurrentProcess(),
                  &hOldStdout,
                  0L,
                  TRUE,
                  DUPLICATE_SAME_ACCESS);
  CloseHandle(GetStdHandle(STD_OUTPUT_HANDLE)); /* <- 現在の標準入力を閉じる */

  /* STDOUTをパイプに切替 ------------------------------------------- */
  DuplicateHandle(GetCurrentProcess(),
                  hPipeWrite,
                  GetCurrentProcess(),
                  &hPipeWriteDup,
                  0L,
                  TRUE,
                  DUPLICATE_SAME_ACCESS);
  SetStdHandle(STD_OUTPUT_HANDLE, hPipeWriteDup);
  CloseHandle(hPipeWrite);


  /* 子プロセスの起動 ----------------------------------------------- */
  memset(&startInfo,0,sizeof(STARTUPINFO));
  startInfo.cb = sizeof(STARTUPINFO);
  result = CreateProcess(NULL,
                         "cmd1",
                         NULL,
                         NULL,
                         TRUE,
                         0,
                         NULL,
                         NULL,
                         &startInfo,
                         &processInfo);


  /* STDOUTを保管していた[hOldStdout]に戻す ------------------------- */
  CloseHandle(GetStdHandle(STD_OUTPUT_HANDLE));
  DuplicateHandle(GetCurrentProcess(),
                  hOldStdout,
                  GetCurrentProcess(),
                  &hOldStdoutDup,
                  0L,
                  TRUE,
                  DUPLICATE_SAME_ACCESS);
  SetStdHandle(STD_OUTPUT_HANDLE, hOldStdoutDup);
  CloseHandle(hOldStdout);


  return 0;
}
