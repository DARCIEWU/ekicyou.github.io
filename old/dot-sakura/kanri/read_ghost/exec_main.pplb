<?php
//====================================================================
// ログ取り込み
//====================================================================
function job1($conn, &$err){
  if(! job1_data_clear($conn, $err))          return FALSE;
  if(! job1_dir_scan($conn, $err, "/ghost"))  return FALSE;
  return TRUE;
}


//====================================================================
// ファイル検索
//====================================================================
function job1_data_clear($conn, &$err){
  $sql ="delete from DOT_TALK where GHOST_ID=" .GHOST_ID_DEF;
  if(! DButil::execute($conn, $sql)){
    $err->addError("初期削除処理", "[DOT_TALK]の削除に失敗しました。");
    return FALSE;
  }

  $sql ="delete from DOT_TALK_EVENT where GHOST_ID=" .GHOST_ID_DEF;
  if(! DButil::execute($conn, $sql)){
    $err->addError("初期削除処理", "[DOT_TALK_EVENT]の削除に失敗しました。");
    return FALSE;
  }

  $sql ="delete from DOT_TALK_LINK_EVENT where GHOST_ID=" .GHOST_ID_DEF;
  if(! DButil::execute($conn, $sql)){
    $err->addError("初期削除処理", "[DOT_TALK_LINK_EVENT]の削除に失敗しました。");
    return FALSE;
  }

  return ! $err->isError();
}


//====================================================================
// ファイル検索
//====================================================================
function job1_dir_scan($conn, &$err, $dirname){
  $d = dir(GHOST_DIR .$dirname);
  while (false !== ($entry = $d->read())) {
    if($entry==".") continue;
    if($entry=="..")  continue;
    if($entry=="CVS") continue;
    $path ="$dirname/$entry";
    $fullpath =realpath(GHOST_DIR .$path);
    $pathInfo =pathinfo($fullpath);
    $ext =$pathInfo[extension];
    if(is_dir($fullpath)){
      if(! job1_dir_scan($conn, $err, $path)) break;
      continue;
    }
    if($ext!="txt")                           continue;
    if($entry=="descript.txt")                continue;
    if($entry=="descriptDebug.txt")           continue;
    if($entry=="fbsdlicence.txt")             continue;
    if($entry=="event_OpeningTalkDebug.txt")  continue;
    if(! job1_main($conn, $err, $path)) break;
  }
  $d->close();
  return ! $err->isError();
}


//====================================================================
// メインルーチン
//====================================================================
function job1_main($conn, &$err, $path){
  $fullpath =realpath(GHOST_DIR .$path);
  $to_enc =mb_internal_encoding();
  $from_enc ="SJIS-win";
  $dat =file($fullpath);

  // ２行目の値をチェック
  $line =trim($dat[1]);
  $line =mb_convert_encoding($line, $to_enc, $from_enc);
  if($line!="# Ｇｈｏｓｔ「．さくら」") return TRUE;

  // table名

  // メインループ
  flush();
  echo "<hr>■$path<br>\n";

  $cnt=0;
  foreach($dat as $line){
    $cnt++;
    echo ".";
    if(($cnt%100)==0){
      echo "$cnt 行<br>\n";
      flush();
    }
    //-----------------------------------------------------------------
    // ■構文解析
    //-----------------------------------------------------------------
    $line =mb_convert_encoding($line, $to_enc, $from_enc);
    $el =toPieces($line);

    // ボトルログ情報ならば情報ストック
    if(isset($el[BOTTLE_LOG])){
      $BOTTLE_LOG[] =$el[BOTTLE_LOG];
      unset($el[BOTTLE_LOG]);
    }

    // キー情報が無ければこの行を飛ばす
    if(! isset($el[KEY])) continue; // 情報がない行は飛ばす


    //-----------------------------------------------------------------
    // ■トークDB登録
    //-----------------------------------------------------------------
    $table ="DOT_TALK";
    $TALK_ID =DButil::getSeq($conn, $table);
    if($TALK_ID===FALSE){
      $err->addError("データ登録", "{$table}のSEQ発行に失敗しました。");
      return FALSE;
    }
    unset($rec);
    $rec[GHOST_ID   ] =GHOST_ID_DEF;
    $rec[ID         ] =$TALK_ID;
    $rec[FILENAME   ] =DButil::strdb($path);
    $rec[LINE       ] =$cnt;
    $rec[EVENT_NAMES] =DButil::strdb($el[KEYS]);
    $rec[SCRIPT     ] =DButil::strdb($el[SCRIPT]);
    $rec[NOTE       ] =DButil::strdb($el[COMMENT]);
    if(! DButil::insert($conn, $table, $rec)){
      $err->addError("データ登録", "{$table}の追加処理に失敗しました。");
      return FALSE;
    }


    //-----------------------------------------------------------------
    // ■イベントDB登録
    //-----------------------------------------------------------------
    foreach($el[KEY] as $NAME){
      // イベント名情報を検索、無ければ新規作成
      unset($T,$F,$W);
      $T[] ="DOT_TALK_EVENT";
      $F[] ="ID as EVENT_ID";
      $W[] ="GHOST_ID=" .GHOST_ID_DEF;
      $W[] ="NAME=" .DButil::strdb($NAME);

      $TT =implode(",", $T);
      $FF =implode(",", $F);
      if(count($W)>0) $WW =" where " .implode(" and ", $W);
      $OO ="";
      $sql ="select $FF from $TT$WW$OO";
      if(! is_array($rec =DButil::query($conn, $sql))){
        // クエリーの失敗
        $err->addError("イベント名操作", "ＤＢアクセスに失敗しました。");
        return FALSE;
      }
      if(count($rec)==0){ // テーブルが存在しない＞＞新規作成
        $EVENT_ID =DButil::getSeq($conn, $TT);
        if($EVENT_ID===FALSE){
          $err->addError("イベント名操作", "{$TT}のSEQ発行に失敗しました。");
          return FALSE;
        }
        unset($rec);
        $rec[ID       ] =$EVENT_ID;
        $rec[GHOST_ID ] =GHOST_ID_DEF;
        $rec[NAME     ] =DButil::strdb($NAME);
        if(! DButil::insert($conn, $TT, $rec)){
          $err->addError("イベント名操作", "テーブルの追加処理に失敗しました。");
          return FALSE;
        }
      }
      else{
        $EVENT_ID =$rec[0][EVENT_ID];
      }
      // トーク・イベント関連情報
      unset($rec);
      $rec[GHOST_ID ] =GHOST_ID_DEF;
      $rec[TALK_ID  ] =$TALK_ID;
      $rec[EVENT_ID ] =$EVENT_ID;
      if(! DButil::insert($conn, "DOT_TALK_LINK_EVENT", $rec)){
        $err->addError("トーク・イベント関連情報", "テーブルの追加処理に失敗しました。");
        return FALSE;
      }
    }

    //-----------------------------------------------------------------
  }

  return ! $err->isError();
}


//====================================================================
// 行解析
//====================================================================
function toPieces($line){
//  $rc[LINE] =$line;

  // コメント開始[#]を検出、分解
  preg_match("/^([^#]*)(.*)$/", $line, $m);
  $line =$m[1];
  $COMMENT =trim($m[2]);
  if($COMMENT!="")  $rc[COMMENT] =$COMMENT;

  // コメント開始を検出、分解
  preg_match("/^([^:]*):(.*)$/", $line, $m);
  $line =$m[1];
  $KEYS =explode(",", $line);
  foreach($KEYS as $k){
    $p =trim($k);
    if($p=="")  continue;
    $rc[KEY][] =$p;
  }
  if(isset($rc[KEY])) $rc[KEYS] =implode(",", $rc[KEY]);
  $SCRIPT =trim($m[2]);
  if($SCRIPT!="") $rc[SCRIPT] =$SCRIPT;

  // ボトル日時コメントを検出
  // #ClassicBottle,2001/01/15 01:48:34
  if(preg_match("/ClassicBottle,(\\d*\\/\\d*\\/\\d* \\d*:\\d*:\\d*)/", $rc[COMMENT], $m)){
    $rc[BOTTLE_LOG] =$m[1];
  }
  return $rc;
}

?>