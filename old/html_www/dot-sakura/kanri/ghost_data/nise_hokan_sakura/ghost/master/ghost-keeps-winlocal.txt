#==============================================================================
#
# 「華和梨」イベント処理用簡易スクリプト(Kawari Easy Event Programmed Script)
#   Windowsローカルアプリケーションイベント スクリプト辞書
#
# ＫＥＥＰＳ製作   ：こやま☆あきら
# OpenKEEPS製作    : ＯｐｅｎＫＥＥＰＳプロジェクトチーム
# OpenKEEPSページ  : http://keeps.sourceforge.jp
#
#==============================================================================
# 動作対象：「華和梨」Phase 7.3.1 及び上位互換版を使用。
#           「何か」（現「伺か」）MATERIA period 480 及び上位互換ソフトを使用。
#==============================================================================


#ＳＳＰスケジューラー==========================================================

#TalkSchedule5Min.ToGo : スケジュールの時間の５分前
# IconType : イベントのタイプ
# system.Reference1 : イベントの内容(caption)
# system.Reference2 : 追加データ(subtitle)
# system.Reference3 : スクリプト(script)

#TalkScheduleRead : カレンダーアイコンの上にマウスをしばらく置いた時
# IconType : イベントのタイプ
# system.Reference1 : イベントの内容(caption)
# system.Reference2 : 追加データ(subtitle)
# system.Reference3 : スクリプト(script)

#TalkScheduleSenseBegin : スケジュールセンサが接続開始する時
# system.Reference0 : スケジュールセンサの名前

#TalkScheduleSenseComplete : スケジュールセンサの処理が完了した時
# system.Reference0 : スケジュールセンサの名前
# system.Reference1 : スケジュールセンサの返したスケジュールデータの数

#TalkScheduleSense{Word1} : スケジュール取得結果(情報が取得されない場合)
# Word1 : Noupdate / Failed / Miss / Error
# スケジュールセンス失敗理由 (更新なし / 受信失敗 / 解析失敗 / その他)

#TalkSchedulePostBegin : スケジュールセンサが投稿モードで接続開始する時
# system.Reference0 : スケジュールセンサの名前

#TalkSchedulePostComplete : スケジュールセンサが投稿処理を完了した時
# system.Reference0 : スケジュールセンサの名前


TalkSchedule5Min.ToGo : \0\s[0]"（"${IconType}"）"\n${system.Reference1}\n\n予定時刻、５分前です。$(if $(expr ${system.Reference2} | ${system.Reference3}) \n−−−−−−−−−−\n${system.Reference2}\n${system.Reference3})\e

TalkScheduleRead : \0\s[0]"（"${IconType}"）"\n${system.Reference1}$(if $(expr ${system.Reference2} | ${system.Reference3}) \n−−−−−−−−−−\n${system.Reference2}\n${system.Reference3})\e

TalkScheduleSenseBegin : \0\s[0]${system.Reference0} スケジュールを取得します。\e

TalkScheduleSenseComplete : \0\s[0]${system.Reference0} スケジュールを取得しました。\n\nスケジュールデータは、${system.Reference1}ありました。\e

TalkScheduleSenseNoupdate : \0\s[4]スケジュールは更新されていませんでした。\e

TalkScheduleSenseFailed : \0\s[4]スケジュール情報が取得できませんでした。\e

TalkSchedualSenceMiss : \0\s[4]スケジュール情報の解析に失敗しました。\e

TalkSchedualSenceError : \0\s[2]「${system.Reference0}」エラーが発生しました。\e

TalkSchedulePostBegin : \0\s[0]${system.Reference0} スケジュールへ投稿します。\e

TalkSchedulePostComplete : \0\s[5]${system.Reference0} スケジュールへの投稿処理が完了しました。\e

#==============================================================================


#UD Sensor データ更新イベント==================================================

# TalkUDSensor : 「UD Agent」及び「UD Sensor」使用時、データが更新された時

# system.Reference0 : 現在の解析度 (単位：％)
# system.Reference1 : １％の解析にかかった時間の「時間」部分
# system.Reference2 : １％の解析にかかった時間の「分」部分
# system.Reference3 : 前回の通知からの経過時間の「時間」部分
# system.Reference4 : 前回の通知からの経過時間の「分」部分
# system.Reference5 : タスク全体の経過時間の「時間」部分
# system.Reference6 : タスク全体の経過時間の「分」部分
# system.Reference7 : 書式化された文字列
# UDSTime1Per       : １％の解析にかかった時間 (単位：分)
# UDSTimePast       : 前回の通知からの経過時間 (単位：分)
# UDSTimeTotal      : タスク全体の経過時間 (単位：分)

TalkUDSensorA : \0\s[5]「UD Agent」のデータが更新されました！\1\s[10]Snoozeして終了するなら今がベスト。\0\n\n解析率：${system.Reference0}％\n${TalkUDSensor0}\e

TalkUDSensorB : \0\s[5]「UD Agent」が解析データを送ります。\1\s[10]インターネットに接続して下さい。\0\n${TalkUDSensor0}\e


TalkUDSensor : \t$(if $([ ${system.Reference0} -eq 0 ]) ${TalkUDSensorB}  ${TalkUDSensorA})

TalkUDSensor0 : \n${TalkUDSensor1}\n${TalkUDSensor2}\n${TalkUDSensor3}$(if ${system.Reference7} "\n----------\n"${system.Reference7})"\e"

TalkUDSensor1 : １％の解析時間：${UDSTime1Per}"分（"$(if ${system.Reference1} ${system.Reference1}"時間")$(if ${system.Reference2} ${system.Reference2}"分")"）"

TalkUDSensor2 : 前回の通知から：${UDSTimePast}"分（"$(if ${system.Reference3} ${system.Reference3}"時間")$(if ${system.Reference4} ${system.Reference4}"分")"）"

TalkUDSensor3 : トータル時間　：${UDSTimeTotal}"分（"$(if ${system.Reference5} ${system.Reference5}"時間" ; if ${system.Reference6} ${system.Reference6}"分")"）"

#==============================================================================


#SHIORI/2.2 Notify対応アプリ汎用イベント=======================================

#・共通の変数
# AppliName      : 稼動中のアプリケーション名
# AppliMaker     : 稼動中のアプリケーションの製造元
# AppliVersion   : 稼動中のアプリケーションのバージョン
# AppliCopyright : 稼動中のアプリケーションの著作権
# AppliURL       : 稼動中のアプリケーションに関するＵＲＬ
# Word1          : アプリケーション名(全・半角スペース、半角記号は削除、
#                  全・半角アルファベットは全て半角小文字に変換）
#ただし「AppliName」以外は情報が送られない(「NoData」)場合もある。

#TalkAppliBoot(.{Word1}) : アプリケーションが起動した。
#TalkAppliClose(.{Word1}) : アプリケーションが終了した。
#  system.Reference0 : アプリケーション名
#  system.Reference1 : アプリケーションの情報(内容はアプリケーションによる)

#TalkAppliExist(.{Word1}) : 起動しているアプリケーションからの汎用通知
#  system.Reference0 : アプリケーション名
#  system.Reference1 : アプリケーションの情報(内容はアプリケーションによる)

#TalkAppliFinish(.{Word1}) : アプリケーションで、特定の処理が終了した時
#  system.Reference0 : アプリケーション名
#  system.Reference1 : 処理の内容(内容はアプリケーションによる)
#  system.Reference2 : 処理の対象(内容はアプリケーションによる)

#TalkAppliOpen(.{Word1}) : アプリケーションが、ファイルを開いた時
#  system.Reference0 : アプリケーション名
#  system.Reference1 : 開いたファイル名(フルパス)
#  AppliFile : 開いたファイル名(ファイル名のみ)
#  AppliType : 開いたファイル名(拡張子のみ)

#TalkWebsite : ウェブサイトからの情報を受信。
#  system.Reference0 : ウェブサイト名
#  system.Reference1 : 最終更新日時
#  system.Reference2 : サイトからのデータ
#  WebNews : さくらスクリプトに変換した、サイトからのデータ

TalkAppliBoot : \0\s[0]「${AppliName}」が起動したよ。\e

TalkAppliBoot.udsensor : \0\s[5]「UDSensor」が起動したよ。\n\n「UNITED DEVICES」の解析状況を報告。\e

TalkAppliClose : \0\s[0]「${AppliName}」が終了したよ。\e

TalkAppliClose.udsensor : \0\s[3]「UDSensor」が終了したよ。\e

TalkAppliExist : \0\s[0]「${system.Reference0}」からの情報。\n\n−−−−−−−−−−\n\n${system.Reference1}\e

TalkAppliFinish : \0\s[5]「${system.Reference0}」の、${system.Reference1}が${system.Reference2}したよ。\e
#＝
TalkAppliOpen : $(if $(expr find ".bmp.jpg.png.gif" ${AppliType}) ${TalkAppliOpen1}  ${TalkAppliOpen2})

TalkAppliOpen1 : \0\s[0]画像ファイル「${AppliFile}」を「${system.Reference0}」で開けてるね。\e

TalkAppliOpen2 : \0\s[0]「${AppliFile}」を「${system.Reference0}」で開けてるね。\e

TalkWebsite : \0\s[0]「${system.Reference0}」からの更新情報。\n\n最終更新日：${system.Reference1}\n−−−−−−−−−−\n${WebNews}\e

#==============================================================================

